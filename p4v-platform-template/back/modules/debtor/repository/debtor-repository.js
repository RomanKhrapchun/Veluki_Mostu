const { sqlRequest } = require("../../../helpers/database");
const { buildWhereCondition } = require("../../../utils/function");
const { getSafeSortField, validateSortDirection } = require("../../../utils/constants");

class DebtorRepository {

    async getDebtByDebtorId(debtId, displayFieldsUsers) {
        // –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±–æ—Ä–∂–Ω–∏–∫–∞
        let sql = `select ${displayFieldsUsers.map(field => ` ${field === 'cadastral_number' || field === 'tax_address' ? 'NULL as ' + field : field}`)} from ower.ower where id = ?`
        
        try {
            const debtorData = await sqlRequest(sql, [debtId]);
            
            // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –±–æ—Ä–∂–Ω–∏–∫–∞ —ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            if (debtorData.length > 0 && (displayFieldsUsers.includes('cadastral_number') || displayFieldsUsers.includes('tax_address'))) {
                const debtorName = debtorData[0].name;
                
                // –û—Ç—Ä–∏–º—É—î–º–æ –í–°–Ü –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –ü–Ü–ë
                const cadasterRepository = require("../../cadaster/repository/cadaster-repository");
                const cadastralData = await cadasterRepository.getAllCadastralDataByPayerName(debtorName);
                
                console.log(`üìä –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è ${debtorName}:`, cadastralData);
                
                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ–ª—è —è–∫ null
                debtorData[0].cadastral_number = null;
                debtorData[0].tax_address = null;
                
                // –Ø–∫—â–æ —î –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –Ω–æ–º–µ—Ä–∏ - –∑–±–∏—Ä–∞—î–º–æ —ó—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É
                if (cadastralData.cadastralNumbers && cadastralData.cadastralNumbers.length > 0) {
                    debtorData[0].cadastral_number = cadastralData.cadastralNumbers.join(', ');
                }
                
                // –Ø–∫—â–æ —î –ø–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ (–∞–ª–µ –Ω–µ–º–∞—î –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤) - –∑–∞–ø–∏—Å—É—î–º–æ –∞–¥—Ä–µ—Å—É
                if (!debtorData[0].cadastral_number && cadastralData.taxAddress) {
                    debtorData[0].tax_address = cadastralData.taxAddress;
                }
                
                // ‚ùå –í–ò–ú–ö–ù–ï–ù–û: –ù–ï –¥–æ–¥–∞—î–º–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ —Å—É–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ –ë–î –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                // –ó–∞–ª–∏—à–∞—î–º–æ land_debt —è–∫ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                console.log(`‚úÖ –ó–∞–ª–∏—à–∞—î–º–æ land_debt —è–∫ –≤ –ë–î: ${debtorData[0].land_debt} –¥–ª—è ${debtorName}`);
            }
            
            return debtorData;
        } catch (error) {
            console.error('‚ùå Database error in getDebtByDebtorId:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –±–æ—Ä–∂–Ω–∏–∫–∞.");
        }
    }

    async findDebtByFilter(limit, offset, title, whereConditions = {}, displayFieldsUsers = [], sortBy = 'name', sortDirection = 'asc') {
        const values = [];
        
        // –í–∞–ª—ñ–¥—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const safeSortField = getSafeSortField(sortBy);
        const safeSortDirection = validateSortDirection(sortDirection);
        
        // –î–æ–¥–∞—î–º–æ total_debt –¥–æ JSON –æ–±'—î–∫—Ç–∞
        const totalDebtExpression = '(COALESCE(non_residential_debt, 0) + COALESCE(residential_debt, 0) + COALESCE(land_debt, 0) + COALESCE(orenda_debt, 0) + COALESCE(mpz, 0))';
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ JSON –ø–æ–ª—è –≤–∫–ª—é—á–∞—é—á–∏ total_debt —ñ cadastral_number
        const baseFields = displayFieldsUsers.filter(field => field !== 'cadastral_number');
        const jsonFields = baseFields.map(field => `'${field}', ${field}`).join(', ');
        
        let sql = `select json_agg(
            json_build_object(
                ${jsonFields},
                'total_debt', ${totalDebtExpression},
                'cadastral_number', cadastral_data.cadastral_number
            )
        ) as data,
        max(cnt) as count
        from (
            select *,
            ${totalDebtExpression} as total_debt_calc,
            count(*) over () as cnt
            from ower.ower
            where 1=1`;

        // –î–æ–¥–∞—î–º–æ WHERE —É–º–æ–≤–∏
        if (Object.keys(whereConditions).length) {
            const data = buildWhereCondition(whereConditions);
            sql += data.text;
            values.push(...data.value);
        }

        // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –ø–æ –Ω–∞–∑–≤—ñ
        if (title) {
            sql += ` and name ILIKE ?`;
            values.push(`%${title}%`);
        }

        // –î–æ–¥–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if (sortBy === 'total_debt') {
            sql += ` order by total_debt_calc ${safeSortDirection.toUpperCase()}`;
        } else if (sortBy === 'name') {
            sql += ` order by LOWER(name) ${safeSortDirection.toUpperCase()}`;
        } else if (sortBy === 'cadastral_number') {
            sql += ` order by CASE WHEN cadastral_data.cadastral_number IS NOT NULL THEN 0 ELSE 1 END, cadastral_data.cadastral_number ${safeSortDirection.toUpperCase()}`;
        } else {
            sql += ` order by ${safeSortField} ${safeSortDirection.toUpperCase()}`;
        }
        
        // –î–æ–¥–∞—î–º–æ –≤—Ç–æ—Ä–∏–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        if (sortBy !== 'id') {
            sql += `, id ${safeSortDirection.toUpperCase()}`;
        }

        // –î–æ–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        values.push(limit);
        values.push(offset);
        
        sql += ` limit ? offset ? ) main_query
        LEFT JOIN LATERAL (
            -- –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–¥–Ω–∞–Ω—ñ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –Ω–æ–º–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–æ—Ä–∂–Ω–∏–∫–∞
            SELECT 
                CASE 
                    WHEN COUNT(CASE WHEN c.cadastral_number IS NOT NULL 
                                    AND c.cadastral_number != '' 
                                    AND NOT c.cadastral_number LIKE 'AUTO_%' 
                                    AND LENGTH(c.cadastral_number) > 5 
                                THEN 1 END) > 0 
                    THEN STRING_AGG(
                        DISTINCT c.cadastral_number, 
                        ', ' 
                        ORDER BY c.cadastral_number
                    ) FILTER (
                        WHERE c.cadastral_number IS NOT NULL 
                        AND c.cadastral_number != '' 
                        AND NOT c.cadastral_number LIKE 'AUTO_%' 
                        AND LENGTH(c.cadastral_number) > 5
                    )
                    ELSE NULL 
                END as cadastral_number
            FROM ower.cadaster_records c 
            WHERE c.payer_name = main_query.name
        ) cadastral_data ON true`;

        console.log('üîç Final SQL:', sql);
        console.log('üîç Values:', values);

        try {
            const result = await sqlRequest(sql, [...values]);
            
            // –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –æ–Ω–æ–≤–ª—é—î–º–æ land_debt –∑ –∫–∞–¥–∞—Å—Ç—Ä—É
            if (result.length > 0 && result[0].data) {
                await this.updateLandDebtFromCadaster(result[0].data);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå Database error in findDebtByFilter:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
        }
    }

    // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û–Ω–æ–≤–ª–µ–Ω–Ω—è land_debt –∑ –¥–∞–Ω–∏—Ö –∫–∞–¥–∞—Å—Ç—Ä—É
    async updateLandDebtFromCadaster(debtors) {
        if (!Array.isArray(debtors)) return;
            
        const cadasterRepository = require("../../cadaster/repository/cadaster-repository");
            
        for (let debtor of debtors) {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –±–æ—Ä–∂–Ω–∏–∫–∞
                const cadastralData = await cadasterRepository.getAllCadastralDataByPayerName(debtor.name);
                    
                // ‚ùå –í–ò–ú–ö–ù–ï–ù–û: –ù–ï –∑–º—ñ–Ω—é—î–º–æ land_debt, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ –ë–î –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                // –¢—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –Ω–æ–º–µ—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                console.log(`‚úÖ –ó–∞–ª–∏—à–∞—î–º–æ land_debt —è–∫ –≤ –ë–î: ${debtor.land_debt} –¥–ª—è ${debtor.name}`);
                    
                // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ total_debt –ë–ï–ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä—É
                const nonResidential = parseFloat(debtor.non_residential_debt) || 0;
                const residential = parseFloat(debtor.residential_debt) || 0;
                const landDebt = parseFloat(debtor.land_debt) || 0; // –ë–µ—Ä–µ–º–æ —è–∫ —î –∑ –ë–î
                const orenda = parseFloat(debtor.orenda_debt) || 0;
                const mpz = parseFloat(debtor.mpz) || 0;
                    
                const totalDebt = Math.round((nonResidential + residential + landDebt + orenda + mpz) * 100) / 100;
                    
                debtor.total_debt = totalDebt;
                    
                console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥ –¥–ª—è ${debtor.name}: ${totalDebt} (–ë–ï–ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä—É)`);
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è ${debtor.name}:`, error);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–ª—è —ñ–Ω—à–∏—Ö –±–æ—Ä–∂–Ω–∏–∫—ñ–≤
            }
        }
    }

    async getRequisite() {
        try {
            console.log('üè¶ Getting requisites from ower.settings');
            const result = await sqlRequest('select * from ower.settings ORDER BY date DESC LIMIT 1');
            
            if (!result.length) {
                console.log('‚ö†Ô∏è No settings found in database');
            } else {
                console.log('‚úÖ Settings found for date:', result[0].date);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå Error getting requisites:', error);
            throw error;
        }
    }
}

module.exports = new DebtorRepository();