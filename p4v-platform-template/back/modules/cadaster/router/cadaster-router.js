const cadasterController = require('../controller/cadaster-controller');
const { cadasterFilterSchema, cadasterInfoSchema, createCadasterSchema, updateCadasterSchema } = require('../schema/cadaster-schema');

const cadasterRouter = async (fastify) => {
    // ===== CADASTER RECORDS =====
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
    fastify.post("/filter", { 
        schema: cadasterFilterSchema,
        handler: cadasterController.findCadasterByFilter
    });
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
    fastify.get("/:id", { 
        schema: cadasterInfoSchema,
        handler: cadasterController.getCadasterById
    });
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
    fastify.post("/", { 
        schema: createCadasterSchema,
        handler: cadasterController.createCadaster
    });
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
    fastify.put("/:id", { 
        schema: updateCadasterSchema,
        handler: cadasterController.updateCadasterById
    });
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
    fastify.delete("/:id", { 
        schema: cadasterInfoSchema,
        handler: cadasterController.deleteCadasterById
    });

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É –∑ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–º–∏ –∑–∞–ø–∏—Å–∞–º–∏
    fastify.post("/upload", { 
        handler: async (request, reply) => {
            try {
                console.log('üîç –í–∏–∫–ª–∏–∫ —Ä–æ—É—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä—É');
                
                let fileData = null;
                let buffer = null;
                
                // –§–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ request.body.file
                if (request.body && request.body.file) {
                    console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª –≤ request.body.file');
                    fileData = request.body.file;
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ buffer –¥–∞–Ω–∏—Ö —Ñ–∞–π–ª—É
                    if (fileData._buf) {
                        buffer = fileData._buf;
                    } else if (fileData.buffer) {
                        buffer = fileData.buffer;
                    } else {
                        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ñ–∞–π–ª—É');
                    }
                    
                    console.log('üìÅ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª:', {
                        filename: fileData.filename,
                        mimetype: fileData.mimetype,
                        encoding: fileData.encoding,
                        fieldname: fileData.fieldname,
                        hasBuffer: !!buffer,
                        bufferSize: buffer?.length
                    });
                } else {
                    throw new Error('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø–∏—Ç—ñ');
                }
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É
                request.file = {
                    originalname: fileData.filename || 'unknown',
                    filename: fileData.filename || 'unknown',
                    mimetype: fileData.mimetype || '',
                    size: buffer.length,
                    buffer: buffer,
                    fieldname: fileData.fieldname || 'file',
                    encoding: fileData.encoding || '7bit'
                };
                
                console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±\'—î–∫—Ç —Ñ–∞–π–ª—É:', {
                    originalname: request.file.originalname,
                    size: request.file.size,
                    mimetype: request.file.mimetype
                });
                
                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
                return await cadasterController.uploadExcelFile(request, reply);
                
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ—É—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
                reply.status(400).send({ 
                    success: false,
                    message: error.message,
                    stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
                });
            }
        }
    });
};

module.exports = cadasterRouter;