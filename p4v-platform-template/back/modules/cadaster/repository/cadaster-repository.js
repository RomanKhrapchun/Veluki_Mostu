const { sqlRequest } = require("../../../helpers/database");
const { buildWhereCondition } = require("../../../utils/function");

class CadasterRepository {

    async findCadasterByFilter(limit, offset, title, whereConditions = {}, displayFields = [], sortBy = 'id', sortDirection = 'desc') {
        const { getSafeCadasterSortField, validateSortDirection } = require("../../../utils/constants");
        const values = [];
        
        // –í–∞–ª—ñ–¥—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const safeSortField = getSafeCadasterSortField ? getSafeCadasterSortField(sortBy) : (sortBy || 'id');
        const safeSortDirection = validateSortDirection ? validateSortDirection(sortDirection) : (sortDirection || 'desc');
        
        console.log('üîÑ Repository sorting params:', { sortBy, sortDirection, safeSortField, safeSortDirection });
        
        let sql = `SELECT json_agg(rw) as data, 
                   max(cnt) as count 
                   FROM (
                       SELECT json_build_object(${displayFields.map(field => `'${field}', ${field}`).join(', ')}) as rw,
                       count(*) over () as cnt
                       FROM ower.cadaster_records
                       WHERE 1=1`;

        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è cadaster
        if (Object.keys(whereConditions).length) {
            const data = this.buildCadasterWhereCondition(whereConditions);
            sql += data.text;
            values.push(...data.value);
        }

        // ‚úÖ –î–û–î–ê–ù–û: –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –ø–æ title (—è–∫ –≤ debtor)
        if (title) {
            sql += ` AND (payer_name ILIKE ? OR cadastral_number ILIKE ? OR payer_address ILIKE ? OR tax_address ILIKE ?)`;
            values.push(`%${title}%`, `%${title}%`, `%${title}%`, `%${title}%`);
        }

        // –î–æ–¥–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if (sortBy === 'payer_name') {
            // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–º–µ–Ω—ñ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É
            sql += ` ORDER BY LOWER(payer_name) ${safeSortDirection.toUpperCase()}`;
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            sql += ` ORDER BY ${safeSortField} ${safeSortDirection.toUpperCase()}`;
        }
        
        // –í—Ç–æ—Ä–∏–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        if (sortBy !== 'id') {
            sql += `, id ${safeSortDirection.toUpperCase()}`;
        }

        values.push(limit);
        values.push(offset);
        sql += ` LIMIT ? OFFSET ? ) q`;

        console.log('üîç Final SQL:', sql);
        console.log('üîç Values:', values);

        try {
            return await sqlRequest(sql, [...values]);
        } catch (error) {
            console.error('‚ùå Database error in findCadasterByFilter:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏.");
        }
    }

    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è WHERE —É–º–æ–≤ —Ç–∞–±–ª–∏—Ü—ñ cadaster –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é ILIKE
    buildCadasterWhereCondition(whereConditions) {
        const values = [];
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É–º–æ–≤–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ null/undefined –∑–Ω–∞—á–µ–Ω—å
        const filteredConditions = Object.keys(whereConditions).filter(key => {
            const value = whereConditions[key];
            return value !== null && value !== undefined && value !== '';
        });

        // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å —É–º–æ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —É–º–æ–≤—É
        if (filteredConditions.length === 0) {
            return {
                text: '',
                value: [],
            };
        }

        const conditions = filteredConditions.map(key => {
            const value = whereConditions[key];
            
            // ‚úÖ ILIKE –ø–æ—à—É–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ (–Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
            if (key === 'payer_name') {
                values.push(`%${value}%`);
                return `payer_name ILIKE ?`;
            }
            
            if (key === 'payer_address') {
                values.push(`%${value}%`);
                return `payer_address ILIKE ?`;
            }
            
            if (key === 'tax_address') {
                values.push(`%${value}%`);
                return `tax_address ILIKE ?`;
            }
            
            if (key === 'cadastral_number') {
                values.push(`%${value}%`);
                return `cadastral_number ILIKE ?`;
            }
            
            if (key === 'iban') {
                values.push(`%${value}%`);
                return `iban ILIKE ?`;
            }
            
            // –î–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            if (key === 'plot_area' || key === 'land_tax') {
                values.push(value);
                return `${key} = ?`;
            }
            
            // –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            values.push(value);
            return `${key} = ?`;

        }).filter(condition => condition !== null);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —É–º–æ–≤–∏ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        if (conditions.length === 0) {
            return {
                text: '',
                value: [],
            };
        }
        
        return {
            text: ' AND ' + conditions.join(' AND '),
            value: values,
        };
    }

    async getCadasterById(id, displayFields = []) {
        let sql = `SELECT ${displayFields.map(field => ` ${field}`)} FROM ower.cadaster_records WHERE id = ?`;
        try {
            return await sqlRequest(sql, [id]);
        } catch (error) {
            console.error('‚ùå Database error in getCadasterById:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –∑–∞–ø–∏—Å.");
        }
    }

    async createCadaster(cadasterData) {
        const sql = `INSERT INTO ower.cadaster_records (${Object.keys(cadasterData).map(field => `${field}`).join(", ")}) 
                     VALUES (${Object.keys(cadasterData).map(el => '?').join(", ")}) 
                     RETURNING id`;
        try {
            return await sqlRequest(sql, [...Object.values(cadasterData)]);
        } catch (error) {
            console.error('‚ùå Database error in createCadaster:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –∑–∞–ø–∏—Å.");
        }
    }

    async updateCadasterById(id, cadasterData) {
        let sql = `UPDATE ower.cadaster_records 
                   SET ${Object.keys(cadasterData).map(field => `${field} = ?`).join(', ')}
                   WHERE id = ? 
                   RETURNING id`;
        try {
            return await sqlRequest(sql, [...Object.values(cadasterData), id]);
        } catch (error) {
            console.error('‚ùå Database error in updateCadasterById:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –∑–∞–ø–∏—Å.");
        }
    }

    async deleteCadasterById(id) {
        try {
            return await sqlRequest('DELETE FROM ower.cadaster_records WHERE id = ? RETURNING id', [id]);
        } catch (error) {
            console.error('‚ùå Database error in deleteCadasterById:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –∑–∞–ø–∏—Å.");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ –ü–Ü–ë –ø–ª–∞—Ç–Ω–∏–∫–∞
    async getCadastralNumberByPayerName(payerName) {
        const sql = `SELECT cadastral_number FROM ower.cadaster_records WHERE payer_name = ? ORDER BY id DESC LIMIT 1`;
        try {
            const result = await sqlRequest(sql, [payerName]);
            return result.length > 0 ? result[0].cadastral_number : null;
        } catch (error) {
            console.error('‚ùå Database error in getCadastralNumberByPayerName:', error);
            return null;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ Excel —Ñ–∞–π–ª—É
    async bulkCreateCadaster(cadasterArray) {
        try {
            if (!Array.isArray(cadasterArray) || !cadasterArray.length) {
                throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
            }

            console.log(`üìä –ü–æ—á–∞—Ç–æ–∫ –º–∞—Å–æ–≤–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è ${cadasterArray.length} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);
            
            const batchSize = 100; // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ 100 –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ä–∞–∑
            let totalImported = 0;
            
            // –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –±–∞—Ç—á—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            for (let i = 0; i < cadasterArray.length; i += batchSize) {
                const batch = cadasterArray.slice(i, i + batchSize);
                const batchResult = await this.insertCadasterBatch(batch);
                totalImported += batchResult;
                
                console.log(`‚úÖ –ë–∞—Ç—á ${Math.floor(i/batchSize) + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${batchResult} –∑–∞–ø–∏—Å—ñ–≤`);
            }

            console.log(`‚úÖ –í—Å—å–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${totalImported} –∑ ${cadasterArray.length}`);
            
            return {
                imported: totalImported,
                total: cadasterArray.length
            };

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
            throw new Error("–ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.");
        }
    }

    async insertCadasterBatch(batch) {
        try {
            let inserted = 0;
            
            for (const record of batch) {
                try {
                    await this.createCadaster(record);
                    inserted++;
                } catch (error) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å—É:', error);
                    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
                }
            }
            
            return inserted;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞—Ç—á –≤—Å—Ç–∞–≤–∫–∏:', error);
            return 0;
        }
    }
}

module.exports = new CadasterRepository();