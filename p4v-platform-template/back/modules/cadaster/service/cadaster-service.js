const cadasterRepository = require('../repository/cadaster-repository');
const logRepository = require('../../log/repository/log-repository');
const { displayCadasterFields } = require('../../../utils/constants');
const { fieldsListMissingError, NotFoundErrorMessage } = require('../../../utils/messages');
const { paginationData } = require('../../../utils/function');

class CadasterService {

    async findCadasterByFilter(request) {
        const page = request?.body?.page || 1;
        const limit = request?.body?.limit || 16;
        const title = request?.body?.title || null; // ‚úÖ –ó–ú–Ü–ù–ï–ù–û: title –∑–∞–º—ñ—Å—Ç—å search
        const sortBy = request?.body?.sort_by || 'id';
        const sortDirection = request?.body?.sort_direction || 'desc';
        
        // –£–º–æ–≤–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è
        const whereConditions = {};
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –ü–Ü–ë –ø–ª–∞—Ç–Ω–∏–∫–∞
        if (request?.body?.payer_name) {
            whereConditions.payer_name = request.body.payer_name;
        }
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é –ø–ª–∞—Ç–Ω–∏–∫–∞
        if (request?.body?.payer_address) {
            whereConditions.payer_address = request.body.payer_address;
        }
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é –∞–¥—Ä–µ—Å–æ—é –ø–ª–∞—Ç–Ω–∏–∫–∞
        if (request?.body?.tax_address) {
            whereConditions.tax_address = request.body.tax_address;
        }
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º
        if (request?.body?.cadastral_number) {
            whereConditions.cadastral_number = request.body.cadastral_number;
        }
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ IBAN
        if (request?.body?.iban) {
            whereConditions.iban = request.body.iban;
        }

        if (!Object.keys(displayCadasterFields).length) {
            throw new Error(fieldsListMissingError);
        }

        try {
            console.log('üîç Cadaster filter request:', {
                page,
                limit,
                title, // ‚úÖ –ó–ú–Ü–ù–ï–ù–û: title –∑–∞–º—ñ—Å—Ç—å search
                whereConditions,
                sortBy,
                sortDirection
            });

            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            const offset = (page - 1) * limit;
            const cadasterData = await cadasterRepository.findCadasterByFilter(
                limit, 
                offset, 
                title, // ‚úÖ –ó–ú–Ü–ù–ï–ù–û: title –∑–∞–º—ñ—Å—Ç—å search
                whereConditions, 
                displayCadasterFields,
                sortBy,
                sortDirection
            );

            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–º—ñ–Ω–µ–Ω–æ —É–º–æ–≤—É –ª–æ–≥—É–≤–∞–Ω–Ω—è
            if (Object.keys(whereConditions).length > 0 || title) {
                await logRepository.createLog({
                    row_pk_id: null,
                    uid: request?.user?.id,
                    action: 'SEARCH', // –ó–º—ñ–Ω–µ–Ω–æ –∑ 'SELECT' –Ω–∞ 'SEARCH'
                    client_addr: request?.ip,
                    application_name: `–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`,
                    action_stamp_tx: new Date(),
                    action_stamp_stm: new Date(),
                    action_stamp_clk: new Date(),
                    schema_name: 'ower',
                    table_name: 'cadaster_records',
                    oid: '16504',
                });
            }
            
            console.log('‚úÖ Cadaster data retrieved successfully:', {
                totalRecords: cadasterData[0]?.count || 0,
                dataLength: cadasterData[0]?.data?.length || 0
            });
            
            return paginationData(cadasterData[0], page, limit);
        } catch (error) {
            console.error('‚ùå Error in findCadasterByFilter:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏.");
        }
    }

    async getCadasterById(request) {
        if (!Object.keys([displayCadasterFields]).length) {
            throw new Error(fieldsListMissingError);
        }
        
        try {
            const cadasterData = await cadasterRepository.getCadasterById(
                request?.params?.id, 
                displayCadasterFields
            );
            
            if (!cadasterData.length) {
                throw new Error(NotFoundErrorMessage);
            }
            
            return cadasterData[0];
        } catch (error) {
            console.error('‚ùå Error in getCadasterById:', error);
            throw error;
        }
    }

    async createCadaster(request) {
        try {
            const cadasterData = {
                payer_name: request.body.payer_name,
                payer_address: request.body.payer_address,
                iban: request.body.iban,
                plot_area: request.body.plot_area,
                land_tax: request.body.land_tax,
                tax_address: request.body.tax_address,
                cadastral_number: request.body.cadastral_number,
                uid: request?.user?.id
            };

            const result = await cadasterRepository.createCadaster(cadasterData);
            
            await logRepository.createLog({
                row_pk_id: result[0]?.id,
                uid: request?.user?.id,
                action: 'INSERT',
                client_addr: request?.ip,
                application_name: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in createCadaster:', error);
            throw error;
        }
    }

    async updateCadasterById(request) {
        try {
            const cadasterData = {
                payer_name: request.body.payer_name,
                payer_address: request.body.payer_address,
                iban: request.body.iban,
                plot_area: request.body.plot_area,
                land_tax: request.body.land_tax,
                tax_address: request.body.tax_address,
                cadastral_number: request.body.cadastral_number,
                editor_id: request?.user?.id
            };

            const result = await cadasterRepository.updateCadasterById(request?.params?.id, cadasterData);
            
            await logRepository.createLog({
                row_pk_id: request?.params?.id,
                uid: request?.user?.id,
                action: 'UPDATE',
                client_addr: request?.ip,
                application_name: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in updateCadasterById:', error);
            throw error;
        }
    }

    async deleteCadasterById(request) {
        try {
            const result = await cadasterRepository.deleteCadasterById(request?.params?.id);
            
            await logRepository.createLog({
                row_pk_id: request?.params?.id,
                uid: request?.user?.id,
                action: 'DELETE',
                client_addr: request?.ip,
                application_name: '–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in deleteCadasterById:', error);
            throw error;
        }
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –ø–æ –ü–Ü–ë (–¥–ª—è debtor –º–æ–¥—É–ª—è)
    async getCadastralNumberByPayerName(payerName) {
        try {
            return await cadasterRepository.getCadastralNumberByPayerName(payerName);
        } catch (error) {
            console.error('‚ùå Error in getCadastralNumberByPayerName:', error);
            return null;
        }
    }
}

module.exports = new CadasterService();