const cadasterRepository = require("../repository/cadaster-repository");
const { fieldsListMissingError, NotFoundErrorMessage } = require("../../../utils/messages")
const { paginate, paginationData } = require("../../../utils/function");
const { displayCadasterFields, allowedCadasterTableFilterFields, allowedCadasterSortFields } = require("../../../utils/constants");
const logRepository = require("../../log/repository/log-repository");
const xlsx = require('xlsx');

class CadasterService {

    async findCadasterByFilter(request) {
        const { 
            page = 1, 
            limit = 16, 
            title, 
            sort_by = null, 
            sort_direction = 'asc',
            ...whereConditions 
        } = request.body;
        
        const { offset } = paginate(page, limit)
        const isValidSortField = sort_by && allowedCadasterSortFields.includes(sort_by);
        const isValidSortDirection = ['asc', 'desc'].includes(sort_direction?.toLowerCase());
    
        const validSortBy = isValidSortField ? sort_by : 'payer_name';
        const validSortDirection = isValidSortDirection ? sort_direction.toLowerCase() : 'asc';

        try {
            const cadasterData = await cadasterRepository.findCadasterByFilter(
                limit, 
                offset, 
                title, 
                whereConditions, 
                displayCadasterFields, 
                validSortBy, 
                validSortDirection
            );

            if (Object.keys(whereConditions).length > 0 || title) {
                await logRepository.createLog({
                    row_pk_id: null,
                    uid: request?.user?.id,
                    action: 'SEARCH',
                    client_addr: request?.ip,
                    application_name: `–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`,
                    action_stamp_tx: new Date(),
                    action_stamp_stm: new Date(),
                    action_stamp_clk: new Date(),
                    schema_name: 'ower',
                    table_name: 'cadaster_records',
                    oid: '16504',
                });
            }
            
            console.log('‚úÖ Cadaster data retrieved successfully:', {
                totalRecords: cadasterData[0]?.count || 0,
                dataLength: cadasterData[0]?.data?.length || 0
            });
            
            return paginationData(cadasterData[0], page, limit);
        } catch (error) {
            console.error('‚ùå Error in findCadasterByFilter:', error);
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏.");
        }
    }

    async getCadasterById(request) {
        if (!Object.keys([displayCadasterFields]).length) {
            throw new Error(fieldsListMissingError);
        }
        
        try {
            const cadasterData = await cadasterRepository.getCadasterById(
                request?.params?.id, 
                displayCadasterFields
            );
            
            if (!cadasterData.length) {
                throw new Error(NotFoundErrorMessage);
            }
            
            return cadasterData[0];
        } catch (error) {
            console.error('‚ùå Error in getCadasterById:', error);
            throw error;
        }
    }

    async createCadaster(request) {
        try {
            const cadasterData = {
                payer_name: request.body.payer_name,
                payer_address: request.body.payer_address,
                iban: request.body.iban,
                plot_area: request.body.plot_area,
                land_tax: request.body.land_tax,
                tax_address: request.body.tax_address,
                cadastral_number: request.body.cadastral_number,
                uid: request?.user?.id
            };

            const result = await cadasterRepository.createCadaster(cadasterData);
            
            await logRepository.createLog({
                row_pk_id: result[0]?.id,
                uid: request?.user?.id,
                action: 'INSERT',
                client_addr: request?.ip,
                application_name: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in createCadaster:', error);
            throw error;
        }
    }

    async updateCadasterById(request) {
        try {
            const cadasterData = {
                payer_name: request.body.payer_name,
                payer_address: request.body.payer_address,
                iban: request.body.iban,
                plot_area: request.body.plot_area,
                land_tax: request.body.land_tax,
                tax_address: request.body.tax_address,
                cadastral_number: request.body.cadastral_number,
                editor_id: request?.user?.id,
                editor_date: new Date()
            };

            const result = await cadasterRepository.updateCadasterById(request?.params?.id, cadasterData);
            
            await logRepository.createLog({
                row_pk_id: request?.params?.id,
                uid: request?.user?.id,
                action: 'UPDATE',
                client_addr: request?.ip,
                application_name: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in updateCadasterById:', error);
            throw error;
        }
    }

    async deleteCadasterById(request) {
        try {
            const result = await cadasterRepository.deleteCadasterById(request?.params?.id);
            
            await logRepository.createLog({
                row_pk_id: request?.params?.id,
                uid: request?.user?.id,
                action: 'DELETE',
                client_addr: request?.ip,
                application_name: '–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
            
            return result[0];
        } catch (error) {
            console.error('‚ùå Error in deleteCadasterById:', error);
            throw error;
        }
    }

    // –°–¢–ê–†–ê –§–£–ù–ö–¶–Ü–Ø (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    async getCadastralNumberByPayerName(payerName) {
        try {
            return await cadasterRepository.getCadastralNumberByPayerName(payerName);
        } catch (error) {
            console.error('‚ùå Error in getCadastralNumberByPayerName:', error);
            return null;
        }
    }

    // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ü–Ü–ë
    async getAllCadastralDataByPayerName(payerName) {
        try {
            console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è: ${payerName}`);
            const result = await cadasterRepository.getAllCadastralDataByPayerName(payerName);
            
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${payerName}:`, {
                –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö_–Ω–æ–º–µ—Ä—ñ–≤: result.cadastralNumbers?.length || 0,
                –∑–∞–≥–∞–ª—å–Ω–∏–π_–ø–æ–¥–∞—Ç–æ–∫: result.totalLandTax || 0,
                –ø–æ–¥–∞—Ç–∫–æ–≤–∞_–∞–¥—Ä–µ—Å–∞: result.taxAddress ? '—î' : '–Ω–µ–º–∞—î'
            });
            
            return result;
        } catch (error) {
            console.error('‚ùå Error in getAllCadastralDataByPayerName:', error);
            return {
                cadastralNumbers: [],
                totalLandTax: 0,
                taxAddress: null,
                plotArea: 0
            };
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    async bulkUpload(request) {
        try {
            // –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ Excel —Ñ–∞–π–ª—É –±—É–¥–µ —Ç—É—Ç
            console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤');
            
            if (!request.file) {
                throw new Error('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –û–±—Ä–æ–±–∫–∞ Excel —Ñ–∞–π–ª—É
            const workbook = xlsx.read(request.file.buffer, { type: 'buffer' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = xlsx.utils.sheet_to_json(worksheet);

            console.log(`üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ ${jsonData.length} –∑–∞–ø–∏—Å—ñ–≤ —É —Ñ–∞–π–ª—ñ`);

            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑–∏
            const cadasterArray = jsonData.map(row => ({
                payer_name: row['–ü–Ü–ë –ü–ª–∞—Ç–Ω–∏–∫–∞'] || row['payer_name'],
                payer_address: row['–ê–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞'] || row['payer_address'],
                iban: row['IBAN'] || row['iban'],
                plot_area: parseFloat(row['–ü–ª–æ—â–∞ –¥—ñ–ª—è–∫–∏']) || parseFloat(row['plot_area']) || 0,
                land_tax: parseFloat(row['–ó–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫']) || parseFloat(row['land_tax']) || 0,
                tax_address: row['–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞'] || row['tax_address'],
                cadastral_number: row['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä'] || row['cadastral_number'],
                uid: request?.user?.id
            }));

            const result = await cadasterRepository.bulkCreateCadaster(cadasterArray);

            await logRepository.createLog({
                row_pk_id: null,
                uid: request?.user?.id,
                action: 'BULK_INSERT',
                client_addr: request?.ip,
                application_name: `–ú–∞—Å–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (${result.imported}/${result.total})`,
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });

            return result;
        } catch (error) {
            console.error('‚ùå Error in bulkUpload:', error);
            throw error;
        }
    }
}

module.exports = new CadasterService();