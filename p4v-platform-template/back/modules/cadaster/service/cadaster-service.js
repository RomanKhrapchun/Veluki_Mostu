const cadasterRepository = require("../repository/cadaster-repository");
const { fieldsListMissingError, NotFoundErrorMessage } = require("../../../utils/messages");
const { paginate, paginationData } = require("../../../utils/function");
const { displayCadasterFields, allowedCadasterTableFilterFields } = require("../../../utils/constants");
const logRepository = require("../../log/repository/log-repository");

class CadasterService {

    async findCadasterByFilter(request) {
        if (!Object.keys([displayCadasterFields]).length) {
            throw new Error(fieldsListMissingError);
        }
        
        const { 
            page = 1, 
            limit = 16, 
            search,
            sort_by = null,
            sort_direction = 'desc',
            ...whereConditions 
        } = request.body;
        
        const { offset } = paginate(page, limit);
        const { allowedCadasterSortFields } = require("../../../utils/constants");
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const isValidSortField = sort_by && allowedCadasterSortFields.includes(sort_by);
        const isValidSortDirection = ['asc', 'desc'].includes(sort_direction?.toLowerCase());

        const validSortBy = isValidSortField ? sort_by : 'id';
        const validSortDirection = isValidSortDirection ? sort_direction.toLowerCase() : 'desc';

        console.log('üîÑ Cadaster sorting params received:', { sort_by, sort_direction });
        console.log('üîÑ Validated cadaster sorting params:', { validSortBy, validSortDirection });
        
        const allowedFields = allowedCadasterTableFilterFields
            .filter(el => whereConditions.hasOwnProperty(el))
            .reduce((acc, key) => ({ ...acc, [key]: whereConditions[key] }), {});

        console.log('üîç Allowed filter fields:', allowedFields);

        const cadasterData = await cadasterRepository.findCadasterByFilter(
            limit, 
            offset, 
            search, 
            allowedFields, 
            displayCadasterFields,
            validSortBy,        // –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            validSortDirection  // –î–æ–¥–∞–Ω–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        );
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É
        if (search || Object.keys(allowedFields).length) {
            await logRepository.createLog({
                row_pk_id: null,
                uid: request?.user?.id,
                action: 'SEARCH',
                client_addr: request?.ip,
                application_name: '–ü–æ—à—É–∫ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤',
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });
        }
        
        return paginationData(cadasterData[0], page, limit);
    }

    async getCadasterById(request) {
        if (!Object.keys([displayCadasterFields]).length) {
            throw new Error(fieldsListMissingError);
        }
        
        const cadasterData = await cadasterRepository.getCadasterById(
            request?.params?.id, 
            displayCadasterFields
        );
        
        if (!cadasterData.length) {
            throw new Error(NotFoundErrorMessage);
        }
        
        return cadasterData[0];
    }

    async createCadaster(request) {
        const cadasterData = {
            payer_name: request.body.payer_name,
            payer_address: request.body.payer_address,
            iban: request.body.iban,
            plot_area: request.body.plot_area,
            land_tax: request.body.land_tax,
            tax_address: request.body.tax_address,
            cadastral_number: request.body.cadastral_number,
            uid: request?.user?.id,
            created_at: new Date(),
            updated_at: new Date()
        };

        return await cadasterRepository.createCadaster(cadasterData);
    }

    async updateCadasterById(request) {
        const cadasterData = {
            payer_name: request.body.payer_name,
            payer_address: request.body.payer_address,
            iban: request.body.iban,
            plot_area: request.body.plot_area,
            land_tax: request.body.land_tax,
            tax_address: request.body.tax_address,
            cadastral_number: request.body.cadastral_number,
            editor_id: request?.user?.id,
            updated_at: new Date()
        };

        const result = await cadasterRepository.updateCadasterById(
            request?.params?.id, 
            cadasterData
        );
        
        if (!result.length) {
            throw new Error(NotFoundErrorMessage);
        }
        
        return result[0];
    }

    async deleteCadasterById(request) {
        const result = await cadasterRepository.deleteCadasterById(request?.params?.id);
        
        if (!result.length) {
            throw new Error(NotFoundErrorMessage);
        }
        
        return result[0];
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É –∑ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    async processExcelUpload(request) {
        const xlsx = require('xlsx');

        try {
            if (!request.file) {
                throw new Error("–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
            let fileName = request.file.originalname || request.file.filename || 'unknown';
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            const fileExtension = fileName.toLowerCase().split('.').pop();
            const isValidFormat = fileExtension === 'xls' || fileExtension === 'xlsx';
            
            if (!isValidFormat) {
                throw new Error(`–§–∞–π–ª –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel (.xls –∞–±–æ .xlsx)!`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ buffer
            if (!request.file.buffer) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ñ–∞–π–ª—É!");
            }

            // –ß–∏—Ç–∞—î–º–æ Excel —Ñ–∞–π–ª
            const workbook = xlsx.read(request.file.buffer, { 
                type: "buffer", 
                cellDates: true,
                bookType: fileExtension === 'xls' ? 'xls' : 'xlsx'
            });
            
            if (!workbook.SheetNames.length) {
                throw new Error("Excel —Ñ–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞—Ä–∫—É—à—ñ–≤!");
            }

            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            
            // –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞
            const jsonData = xlsx.utils.sheet_to_json(worksheet, {
                defval: null,
                blankrows: false,
                raw: false
            });

            if (!jsonData.length) {
                throw new Error("–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö!");
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—É
            const requiredColumns = [
                'PAYER_NAME',
                'TO_ADDRESS', 
                'ST',
                'SQUARE',
                'ZN',
                '–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞',
                '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä'
            ];

            const errors = [];
            const firstRow = jsonData[0];
            const availableColumns = Object.keys(firstRow);
            
            requiredColumns.forEach(column => {
                if (!availableColumns.includes(column)) {
                    errors.push(`–í—ñ–¥—Å—É—Ç–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞: "${column}"`);
                }
            });

            if (errors.length > 0) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Ñ–∞–π–ª—É: ${errors.join('\n')}
                –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: ${availableColumns.map(col => `"${col}"`).join(', ')}`);
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            const validatedData = this.validateAndTransformExcelData(jsonData, request?.user?.id);
            
            // –ú–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
            const uploadResult = await cadasterRepository.bulkCreateCadaster(validatedData);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è
            const safeFileName = fileName.replace(/[^\w\s.-]/g, '_');
            await logRepository.createLog({
                row_pk_id: null,
                uid: request?.user?.id,
                action: 'INSERT',
                client_addr: request?.ip,
                application_name: `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (${safeFileName})`,
                action_stamp_tx: new Date(),
                action_stamp_stm: new Date(),
                action_stamp_clk: new Date(),
                schema_name: 'ower',
                table_name: 'cadaster_records',
                oid: '16504',
            });

            return {
                success: true,
                message: `–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${uploadResult.imported} –∑–∞–ø–∏—Å—ñ–≤ –∑ ${uploadResult.total}`,
                imported: uploadResult.imported,
                total: uploadResult.total
            };

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Excel —Ñ–∞–π–ª—É:', error);
            throw error;
        }
    }

    validateAndTransformExcelData(jsonData, userId) {
        const validatedData = [];
        const errors = [];

        jsonData.forEach((row, index) => {
            const rowNumber = index + 2; // +2 —Ç–æ–º—É —â–æ —Ä—è–¥–æ–∫ 1 —Ü–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —ñ —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0
            
            try {
                const record = {};

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ü–Ü–ë –ø–ª–∞—Ç–Ω–∏–∫–∞
                if (!row['PAYER_NAME'] || !row['PAYER_NAME'].trim()) {
                    errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –í—ñ–¥—Å—É—Ç–Ω—î –ü–Ü–ë –ø–ª–∞—Ç–Ω–∏–∫–∞`);
                    return;
                } else {
                    record.payer_name = row['PAYER_NAME'].trim();
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏ –ø–ª–∞—Ç–Ω–∏–∫–∞
                if (!row['TO_ADDRESS'] || !row['TO_ADDRESS'].trim()) {
                    errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –í—ñ–¥—Å—É—Ç–Ω—è –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞`);
                    return;
                } else {
                    record.payer_address = row['TO_ADDRESS'].trim();
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è IBAN (—Ä–æ–±–ª—é –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º)
                if (row['ST'] && row['ST'].trim()) {
                    const iban = row['ST'].trim().replace(/\s/g, ''); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
                    if (!/^UA\d{27}$/.test(iban)) {
                        errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç IBAN: "${iban}"`);
                    } else {
                        record.iban = iban;
                    }
                } else {
                    record.iban = null; // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π IBAN
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏
                if (!row['SQUARE']) {
                    record.plot_area = 0.0;
                } else {
                    const plotArea = parseFloat(row['SQUARE']);
                    if (isNaN(plotArea) || plotArea < 0) {
                        errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–ª–æ—â–∞ –¥—ñ–ª—è–Ω–∫–∏: "${row['SQUARE']}"`);
                        record.plot_area = 0.0;
                    } else {
                        record.plot_area = plotArea;
                    }
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
                if (!row['ZN']) {
                    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–¥–∞—Ç–∫—É, —Å—Ç–∞–≤–∏–º–æ 100
                    record.land_tax = 100.0;
                } else {
                    const landTax = parseFloat(row['ZN']);
                    if (isNaN(landTax) || landTax < 0) {
                        errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫: "${row['ZN']}"`);
                        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–¥–∞—Ç–∫—É, —Å—Ç–∞–≤–∏–º–æ 100
                        record.land_tax = 100.0;
                    } else {
                        record.land_tax = landTax;
                    }
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ - —Ä–æ–±–ª—é –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—é
                if (row['–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞'] && row['–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞'].trim()) {
                    record.tax_address = row['–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞'].trim();
                } else {
                    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É
                    record.tax_address = record.payer_address || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä
                if (!row['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä'] || !row['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä'].trim()) {
                    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä
                    record.cadastral_number = `AUTO_${Date.now()}_${index}`;
                } else {
                    record.cadastral_number = row['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä'].trim();
                }

                // –î–æ–¥–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
                record.uid = userId;

                // –Ø–∫—â–æ —î –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ, –¥–æ–¥–∞—î–º–æ –≤ –º–∞—Å–∏–≤
                if (record.payer_name && record.payer_address) {
                    validatedData.push(record);
                }

            } catch (error) {
                errors.push(`–†—è–¥–æ–∫ ${rowNumber}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ - ${error.message}`);
            }
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 20 –ø–æ–º–∏–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if (errors.length > 0) {
            console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${errors.length} –ø–æ–º–∏–ª–æ–∫. –ü–µ—Ä—à—ñ 20:`);
            console.log(errors.slice(0, 20).join('\n'));
            
            // –Ø–∫—â–æ —î —Ö–æ—á–∞ –± —è–∫—ñ—Å—å –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
            if (validatedData.length > 0) {
                console.log(`–í–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: ${validatedData.length}`);
                return validatedData;
            } else {
                throw new Error(`–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:\n${errors.slice(0, 10).join('\n')}${errors.length > 10 ? `\n... —Ç–∞ —â–µ ${errors.length - 10} –ø–æ–º–∏–ª–æ–∫` : ''}`);
            }
        }

        return validatedData;
    }

}

module.exports = new CadasterService();