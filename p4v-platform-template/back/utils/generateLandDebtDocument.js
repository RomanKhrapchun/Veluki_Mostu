const { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, AlignmentType, BorderStyle, ImageRun } = require('docx');
const fs = require('fs').promises;

/**
 * –ì–µ–Ω–µ—Ä—É—î Word –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º
 * @param {Object} debtorData - –î–∞–Ω—ñ –±–æ—Ä–∂–Ω–∏–∫–∞
 * @param {Object} requisiteData - –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
 * @param {Array} tableRows - –†—è–¥–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
 * @param {Number} landTaxAmount - –°—É–º–∞ –¢–Ü–õ–¨–ö–ò –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
 * @param {Number} totalAmount - –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (–∑–µ–º–µ–ª—å–Ω–∏–π + –≤—Å—ñ —ñ–Ω—à—ñ –±–æ—Ä–≥–∏)
 * @returns {Buffer} - –ë—É—Ñ–µ—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function generateLandDebtDocument(debtorData, requisiteData, tableRows, landTaxAmount, totalAmount) {
    try {
        console.log('üîÑ Generating land tax document for:', debtorData.name);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ QR-–∫–æ–¥
        const qrCodeBuffer = await getExistingQRCode();
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
        const currentDate = new Date().toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: 'long',
            year: 'numeric'
        });

        // –ú–∞—Å–∫—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥
        const maskedId = debtorData.identification ? 
            '–•–•–•–•–•–•–•' + debtorData.identification.slice(-3) : 'XXXXXXX575';

        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â—É—î–º–æ AUTO_ –Ω–æ–º–µ—Ä–∏, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ —Ä—è–¥–∫–∏
        const filteredTableRows = tableRows.map(row => ({
            ...row,
            cadastralNumber: (row.cadastralNumber && row.cadastralNumber.startsWith('AUTO_')) ? '' : row.cadastralNumber
        }));

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        const doc = new Document({
            sections: [{
                properties: {
                    page: {
                        margin: {
                            top: 720,     // ‚úÖ –ó–ú–ï–ù–®–ï–ù–û: 0.5 inch –∑–∞–º—ñ—Å—Ç—å 1 inch
                            right: 1440,  // 1 inch
                            bottom: 1440, // 1 inch
                            left: 1440,   // 1 inch
                        },
                    },
                },
                children: [
                    // ‚úÖ –ü–Ü–ë —Å–ø—Ä–∞–≤–∞
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: debtorData.name?.toUpperCase() || '–ù–ï –í–ö–ê–ó–ê–ù–û',
                                bold: true,
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        alignment: AlignmentType.RIGHT,
                        spacing: { after: 0 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –≤—ñ–¥—Å—Ç—É–ø
                    }),

                    // ‚úÖ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ —Å–ø—Ä–∞–≤–∞
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `—ñ.–∫. ${maskedId}`,
                                bold: true,
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        alignment: AlignmentType.RIGHT,
                        spacing: { after: 120 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –≤—ñ–¥—Å—Ç—É–ø
                    }),

                    // –ù–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                bold: true,
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        alignment: AlignmentType.CENTER,
                        spacing: { after: 120 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –≤—ñ–¥—Å—Ç—É–ø
                    }),

                    // –í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `     –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ —Ä–∞–¥–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–∞–Ω–∏—Ö –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ, —Å—Ç–∞–Ω–æ–º ${currentDate} —É –í–∞—Å –Ω–∞—è–≤–Ω–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –≥—Ä–æ–º–∞–¥–∏, –∞ —Å–∞–º–µ:`,
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        spacing: { after: 120 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –≤—ñ–¥—Å—Ç—É–ø
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // ‚úÖ –û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
                    ...generateMainTable(filteredTableRows),

                    // ‚úÖ –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å–µ–∫—Ü—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
                    ...generateSummarySection(landTaxAmount, totalAmount),

                    // ‚úÖ –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è —Ç–∞–±–ª–∏—á–∫–∏
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–í —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –ø–æ –¥–∞–Ω—ñ–π –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (03234) 4-18-80.',
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        spacing: { before: 240, after: 120 }, // ‚úÖ –ó–ú–ï–ù–®–ï–ù–û –≤—ñ–¥—Å—Ç—É–ø–∏
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–ü—Ä–æ—Å–∏–º–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ–≥–∞—Å–∏—Ç–∏ —É—Ç–≤–æ—Ä–µ–Ω—É –í–∞–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –≥—Ä–æ–º–∞–¥–∏. –ù–µ—Å–≤–æ—î—á–∞—Å–Ω–∞ —Å–ø–ª–∞—Ç–∞ —Å—É–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø–µ–Ω—ñ.',
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        spacing: { after: 120 }, // ‚úÖ –ó–ú–ï–ù–®–ï–ù–û –≤—ñ–¥—Å—Ç—É–ø
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –º–æ–∂–Ω–∞ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞—Ö ¬´–ü–æ—Ä—Ç–∞–ª –º—ñ—Å—Ü–µ–≤–∏—Ö –ø–æ–¥–∞—Ç–∫—ñ–≤ –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –≥—Ä–æ–º–∞–¥–∏¬ª ',
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                            new TextRun({
                                text: 'https://velykimosty.skydatagroup.com/',
                                size: 26, // 13pt
                                font: "Times New Roman",
                                underline: {},
                                color: "0000FF",
                            }),
                            new TextRun({
                                text: ' –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´–ú—ñ—Å—Ü–µ–≤—ñ –ø–æ–¥–∞—Ç–∫–∏ –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –¢–ì¬ª ',
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                            new TextRun({
                                text: 'https://t.me/Velykimosty_taxes_bot',
                                size: 26, // 13pt
                                font: "Times New Roman",
                                underline: {},
                                color: "0000FF",
                            }),
                            new TextRun({
                                text: '. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.',
                                size: 26, // 13pt
                                font: "Times New Roman",
                            }),
                        ],
                        spacing: { after: 240 }, // ‚úÖ –ó–ú–ï–ù–®–ï–ù–û –≤—ñ–¥—Å—Ç—É–ø
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // ‚úÖ QR-–∫–æ–¥ —Å–ø—Ä–∞–≤–∞
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: qrCodeBuffer,
                                transformation: {
                                    width: 100,
                                    height: 100,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT,
                        spacing: { before: 120 }, // ‚úÖ –ó–ú–ï–ù–®–ï–ù–û –≤—ñ–¥—Å—Ç—É–ø
                    }),
                ],
            }],
        });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –±—É—Ñ–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const buffer = await Packer.toBuffer(doc);
        console.log('‚úÖ Land tax document generated successfully');
        return buffer;

    } catch (error) {
        console.error('‚ùå Error generating land tax document:', error);
        throw error;
    }
}

/**
 * ‚úÖ –ì–µ–Ω–µ—Ä—É—î –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Ç–∞ —à—Ä–∏—Ñ—Ç–∞–º–∏
 */
function generateMainTable(tableRows) {
    if (!tableRows || !Array.isArray(tableRows) || tableRows.length === 0) {
        console.log('‚ö†Ô∏è No table rows provided');
        return [];
    }

    return [
        new Table({
            width: { size: 9648, type: WidthType.DXA }, // ‚úÖ –ü–æ–≤–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤ DXA
            rows: [
                // ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –∑ —à—Ä–∏—Ñ—Ç–æ–º 12pt
                new TableRow({
                    children: [
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: '–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞',
                                            bold: true,
                                            size: 24, // 12pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.CENTER,
                                }),
                            ],
                            width: { size: 5789, type: WidthType.DXA }, // ‚úÖ 60% –≤—ñ–¥ 9648
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä',
                                            bold: true,
                                            size: 24, // 12pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.CENTER,
                                }),
                            ],
                            width: { size: 2412, type: WidthType.DXA }, // ‚úÖ 25% –≤—ñ–¥ 9648
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: '–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è',
                                            bold: true,
                                            size: 24, // 12pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.CENTER,
                                }),
                            ],
                            width: { size: 1447, type: WidthType.DXA }, // ‚úÖ 15% –≤—ñ–¥ 9648
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                    ],
                }),
                // ‚úÖ –†—è–¥–∫–∏ –∑ –¥–∞–Ω–∏–º–∏ –∑ —à—Ä–∏—Ñ—Ç–æ–º 11pt
                ...tableRows.map(row => new TableRow({
                    children: [
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: row.taxAddress || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                                            size: 22, // 11pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.LEFT,
                                }),
                            ],
                            width: { size: 5789, type: WidthType.DXA },
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: row.cadastralNumber || '',
                                            size: 22, // 11pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.CENTER,
                                }),
                            ],
                            width: { size: 2412, type: WidthType.DXA },
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                        new TableCell({
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: row.amount || '0.00',
                                            size: 22, // 11pt
                                            font: "Times New Roman",
                                        }),
                                    ],
                                    alignment: AlignmentType.RIGHT,
                                }),
                            ],
                            width: { size: 1447, type: WidthType.DXA },
                            borders: {
                                top: { style: BorderStyle.SINGLE, size: 1 },
                                bottom: { style: BorderStyle.SINGLE, size: 1 },
                                left: { style: BorderStyle.SINGLE, size: 1 },
                                right: { style: BorderStyle.SINGLE, size: 1 },
                            },
                        }),
                    ],
                }))
            ],
        }),
    ];
}

/**
 * ‚úÖ –ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å–µ–∫—Ü—ñ—é –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ —Ç–∞ Bold
 */
function generateSummarySection(landTaxAmount, totalAmount) {
    return [
        // ‚úÖ –ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É (–¢–Ü–õ–¨–ö–ò –∑–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫)
        new Paragraph({
            children: [
                new TextRun({
                    text: `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É –∑ —Ñ—ñ–∑. –æ—Å—ñ–± –Ω–∞ —Å—É–º—É `,
                    size: 26, // 13pt
                    font: "Times New Roman",
                }),
                new TextRun({
                    text: `${landTaxAmount} –≥—Ä–Ω.`,
                    bold: true, // ‚úÖ BOLD
                    size: 26, // 13pt
                    font: "Times New Roman",
                }),
            ],
            spacing: { before: 120, after: 0 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–Ü –≤—ñ–¥—Å—Ç—É–ø–∏
            alignment: AlignmentType.LEFT,
        }),
        // ‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (–∑–µ–º–µ–ª—å–Ω–∏–π + –≤—Å—ñ —ñ–Ω—à—ñ –±–æ—Ä–≥–∏)
        new Paragraph({
            children: [
                new TextRun({
                    text: `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: `,
                    size: 26, // 13pt
                    font: "Times New Roman",
                }),
                new TextRun({
                    text: `${totalAmount} –≥—Ä–Ω`,
                    bold: true, // ‚úÖ BOLD
                    size: 26, // 13pt
                    font: "Times New Roman",
                }),
            ],
            spacing: { after: 0 }, // ‚úÖ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –≤—ñ–¥—Å—Ç—É–ø
            alignment: AlignmentType.LEFT,
        })
    ];
}

/**
 * –û—Ç—Ä–∏–º—É—î —ñ—Å–Ω—É—é—á–∏–π QR-–∫–æ–¥ –∑ —Ñ–∞–π–ª—É
 */
async function getExistingQRCode() {
    try {
        const qrBuffer = await fs.readFile('./files/qr-code.png');
        console.log('‚úÖ Existing QR code loaded successfully');
        return qrBuffer;
    } catch (error) {
        console.error('‚ùå Error reading existing QR code:', error);
        const fallbackBuffer = Buffer.from('PNG_PLACEHOLDER');
        return fallbackBuffer;
    }
}

module.exports = {
    generateLandDebtDocument
};