const { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, AlignmentType, BorderStyle, ImageRun } = require('docx');
const fs = require('fs').promises;
const { addRequisiteToLandDebt } = require('./function');

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π Word –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –±–æ—Ä–≥—É –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö
 * @param {Object} debtorData - –î–∞–Ω—ñ –±–æ—Ä–∂–Ω–∏–∫–∞
 * @param {Object} requisiteData - –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
 * @returns {Buffer} - –ë—É—Ñ–µ—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function generateDetailedLandDebtDocument(debtorData, requisiteData) {
    try {
        console.log('üîÑ Generating detailed land debt document for:', debtorData.name);

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ñ –¥–∞–Ω—ñ
        const cadasterRepository = require('../modules/cadaster/repository/cadaster-repository');
        const detailedCadastralData = await cadasterRepository.getAllCadastralDataByPayerName(debtorData.name);
        
        console.log('üè† Detailed cadastral data:', JSON.stringify(detailedCadastralData, null, 2));

        // –ì–µ–Ω–µ—Ä—É—î–º–æ QR-–∫–æ–¥
        const qrCodeBuffer = await getExistingQRCode();
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
        const currentDate = new Date().toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: 'long',
            year: 'numeric'
        });

        // –ú–∞—Å–∫—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥
        const maskedId = debtorData.identification ? 
            '–•–•–•–•–•–•–•' + debtorData.identification.slice(-3) : 'XXXXXXXXXX';

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ–∫—Ä–µ–º—ñ –∑–∞–ø–∏—Å–∏ –∫–∞–¥–∞—Å—Ç—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
        const individualCadastralRecords = await cadasterRepository.getIndividualCadastralRecords(debtorData.name);
        
        console.log('üìä Individual cadastral records:', JSON.stringify(individualCadastralRecords, null, 2));

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        const doc = new Document({
            sections: [{
                properties: {
                    page: {
                        margin: {
                            top: 1440,    // 1 inch
                            right: 1440,  // 1 inch
                            bottom: 1440, // 1 inch
                            left: 1440,   // 1 inch
                        },
                    },
                },
                children: [
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –ü–Ü–ë –±–æ—Ä–∂–Ω–∏–∫–∞
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: debtorData.name?.toUpperCase() || '–ù–ï –í–ö–ê–ó–ê–ù–û',
                                bold: true,
                                size: 24,
                            }),
                        ],
                        alignment: AlignmentType.CENTER,
                        spacing: { after: 200 },
                    }),

                    // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ (—Å–ø—Ä–∞–≤–∞)
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `—ñ.–∫. ${maskedId}`,
                                bold: true,
                                size: 24,
                            }),
                        ],
                        alignment: AlignmentType.RIGHT,
                        spacing: { after: 200 },
                    }),

                    // –ù–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                bold: true,
                                size: 24,
                            }),
                        ],
                        alignment: AlignmentType.CENTER,
                        spacing: { after: 400 },
                    }),

                    // –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `–í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ —Ä–∞–¥–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–∞–Ω–∏—Ö –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ, —Å—Ç–∞–Ω–æ–º ${currentDate} —É –í–∞—Å –Ω–∞—è–≤–Ω–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –≥—Ä–æ–º–∞–¥–∏, –∞ —Å–∞–º–µ:`,
                                size: 22,
                            }),
                        ],
                        spacing: { after: 400 },
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // –î–ï–¢–ê–õ–¨–ù–ê –¢–ê–ë–õ–ò–¶–Ø –∑ –æ–∫—Ä–µ–º–∏–º–∏ —Ä—è–¥–∫–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                    new Table({
                        width: {
                            size: 100,
                            type: WidthType.PERCENTAGE,
                        },
                        rows: [
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
                            new TableRow({
                                children: [
                                    new TableCell({
                                        children: [
                                            new Paragraph({
                                                children: [
                                                    new TextRun({
                                                        text: '–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞',
                                                        bold: true,
                                                        size: 20,
                                                    }),
                                                ],
                                                alignment: AlignmentType.CENTER,
                                            }),
                                        ],
                                        width: { size: 50, type: WidthType.PERCENTAGE },
                                        borders: {
                                            top: { style: BorderStyle.SINGLE, size: 1 },
                                            bottom: { style: BorderStyle.SINGLE, size: 1 },
                                            left: { style: BorderStyle.SINGLE, size: 1 },
                                            right: { style: BorderStyle.SINGLE, size: 1 },
                                        },
                                    }),
                                    new TableCell({
                                        children: [
                                            new Paragraph({
                                                children: [
                                                    new TextRun({
                                                        text: '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä',
                                                        bold: true,
                                                        size: 20,
                                                    }),
                                                ],
                                                alignment: AlignmentType.CENTER,
                                            }),
                                        ],
                                        width: { size: 30, type: WidthType.PERCENTAGE },
                                        borders: {
                                            top: { style: BorderStyle.SINGLE, size: 1 },
                                            bottom: { style: BorderStyle.SINGLE, size: 1 },
                                            left: { style: BorderStyle.SINGLE, size: 1 },
                                            right: { style: BorderStyle.SINGLE, size: 1 },
                                        },
                                    }),
                                    new TableCell({
                                        children: [
                                            new Paragraph({
                                                children: [
                                                    new TextRun({
                                                        text: '–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è',
                                                        bold: true,
                                                        size: 20,
                                                    }),
                                                ],
                                                alignment: AlignmentType.CENTER,
                                            }),
                                        ],
                                        width: { size: 20, type: WidthType.PERCENTAGE },
                                        borders: {
                                            top: { style: BorderStyle.SINGLE, size: 1 },
                                            bottom: { style: BorderStyle.SINGLE, size: 1 },
                                            left: { style: BorderStyle.SINGLE, size: 1 },
                                            right: { style: BorderStyle.SINGLE, size: 1 },
                                        },
                                    }),
                                ],
                            }),
                            // –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                            ...generateDetailedTableRows(individualCadastralRecords)
                        ],
                    }),

                    // –ü—ñ–¥—Å—É–º–æ–∫ –ø—ñ—Å–ª—è —Ç–∞–±–ª–∏—Ü—ñ
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É –∑ —Ñ—ñ–∑. –æ—Å—ñ–± –Ω–∞ —Å—É–º—É `,
                                size: 22,
                            }),
                            new TextRun({
                                text: `${debtorData.land_debt || '0.00'} –≥—Ä–Ω.\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${detailedCadastralData.totalLandTax || debtorData.land_debt || '0.00'} –≥—Ä–Ω`,
                                bold: true,
                                size: 22,
                            }),
                        ],
                        spacing: { before: 300, after: 400 },
                        alignment: AlignmentType.LEFT,
                        border: {
                            left: { style: BorderStyle.SINGLE, size: 2 },
                        },
                    }),

                    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–í —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –ø–æ –¥–∞–Ω—ñ–π –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (03234) 4-18-80.',
                                size: 22,
                            }),
                        ],
                        spacing: { after: 300 },
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Å–ø–ª–∞—Ç—É
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–ü—Ä–æ—Å–∏–º–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ–≥–∞—Å–∏—Ç–∏ —É—Ç–≤–æ—Ä–µ–Ω—É –í–∞–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó –≥—Ä–æ–º–∞–¥–∏. –ù–µ—Å–≤–æ—î—á–∞—Å–Ω–∞ —Å–ø–ª–∞—Ç–∞ —Å—É–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø–µ–Ω—ñ.',
                                size: 22,
                            }),
                        ],
                        spacing: { after: 300 },
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤—ñ—Å–∏
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –º–æ–∂–Ω–∞ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞—Ö ¬´–ü–æ—Ä—Ç–∞–ª –º—ñ—Å—Ü–µ–≤–∏—Ö –ø–æ–¥–∞—Ç–∫—ñ–≤ –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –≥—Ä–æ–º–∞–¥–∏¬ª ',
                                size: 22,
                            }),
                            new TextRun({
                                text: 'https://velykimosty.skydatagroup.com/',
                                size: 22,
                                underline: true,
                                color: '0000FF',
                            }),
                            new TextRun({
                                text: ' –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´–ú—ñ—Å—Ü–µ–≤—ñ –ø–æ–¥–∞—Ç–∫–∏ –í–µ–ª–∏–∫–æ–º–æ—Å—Ç—ñ–≤—Å—å–∫–æ—ó –¢–ì¬ª ',
                                size: 22,
                            }),
                            new TextRun({
                                text: 'https://t.me/Velykimosty_taxes_bot',
                                size: 22,
                                underline: true,
                                color: '0000FF',
                            }),
                            new TextRun({
                                text: '. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.',
                                size: 22,
                            }),
                        ],
                        spacing: { after: 300 },
                        alignment: AlignmentType.JUSTIFIED,
                    }),

                    // QR-–∫–æ–¥ (—Å–ø—Ä–∞–≤–∞)
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: qrCodeBuffer,
                                transformation: {
                                    width: 96,
                                    height: 96,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT,
                        spacing: { before: 200 },
                    }),
                ],
            }],
        });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –±—É—Ñ–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const buffer = await Packer.toBuffer(doc);
        console.log('‚úÖ Detailed land debt document generated successfully');
        return buffer;

    } catch (error) {
        console.error('‚ùå Error generating detailed land debt document:', error);
        throw error;
    }
}

/**
 * –ì–µ–Ω–µ—Ä—É—î —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–∫—Ä–µ–º–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
 */
function generateDetailedTableRows(cadastralRecords) {
    if (!cadastralRecords || !Array.isArray(cadastralRecords)) {
        console.log('‚ö†Ô∏è No individual cadastral records, using fallback');
        return [
            new TableRow({
                children: [
                    new TableCell({
                        children: [new Paragraph({ children: [new TextRun({ text: '–ù–ï –í–ö–ê–ó–ê–ù–û', size: 18 })] })],
                        borders: { top: { style: BorderStyle.SINGLE, size: 1 }, bottom: { style: BorderStyle.SINGLE, size: 1 }, left: { style: BorderStyle.SINGLE, size: 1 }, right: { style: BorderStyle.SINGLE, size: 1 } },
                    }),
                    new TableCell({
                        children: [new Paragraph({ children: [new TextRun({ text: '', size: 18 })] })],
                        borders: { top: { style: BorderStyle.SINGLE, size: 1 }, bottom: { style: BorderStyle.SINGLE, size: 1 }, left: { style: BorderStyle.SINGLE, size: 1 }, right: { style: BorderStyle.SINGLE, size: 1 } },
                    }),
                    new TableCell({
                        children: [new Paragraph({ children: [new TextRun({ text: '0.00', size: 18 })] })],
                        borders: { top: { style: BorderStyle.SINGLE, size: 1 }, bottom: { style: BorderStyle.SINGLE, size: 1 }, left: { style: BorderStyle.SINGLE, size: 1 }, right: { style: BorderStyle.SINGLE, size: 1 } },
                    }),
                ],
            })
        ];
    }

    return cadastralRecords.map(record => 
        new TableRow({
            children: [
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: record.tax_address || '–ù–ï –í–ö–ê–ó–ê–ù–û',
                                    size: 18,
                                }),
                            ],
                            alignment: AlignmentType.LEFT,
                        }),
                    ],
                    borders: {
                        top: { style: BorderStyle.SINGLE, size: 1 },
                        bottom: { style: BorderStyle.SINGLE, size: 1 },
                        left: { style: BorderStyle.SINGLE, size: 1 },
                        right: { style: BorderStyle.SINGLE, size: 1 },
                    },
                }),
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: record.cadastral_number || '',
                                    size: 18,
                                }),
                            ],
                            alignment: AlignmentType.LEFT,
                        }),
                    ],
                    borders: {
                        top: { style: BorderStyle.SINGLE, size: 1 },
                        bottom: { style: BorderStyle.SINGLE, size: 1 },
                        left: { style: BorderStyle.SINGLE, size: 1 },
                        right: { style: BorderStyle.SINGLE, size: 1 },
                    },
                }),
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: `${record.land_tax || '0.00'}`,
                                    size: 18,
                                }),
                            ],
                            alignment: AlignmentType.RIGHT,
                        }),
                    ],
                    borders: {
                        top: { style: BorderStyle.SINGLE, size: 1 },
                        bottom: { style: BorderStyle.SINGLE, size: 1 },
                        left: { style: BorderStyle.SINGLE, size: 1 },
                        right: { style: BorderStyle.SINGLE, size: 1 },
                    },
                }),
            ],
        })
    );
}

/**
 * –û—Ç—Ä–∏–º—É—î —ñ—Å–Ω—É—é—á–∏–π QR-–∫–æ–¥ –∑ —Ñ–∞–π–ª—É
 */
async function getExistingQRCode() {
    try {
        const qrBuffer = await fs.readFile('./files/qr-code.png');
        console.log('‚úÖ Existing QR code loaded successfully');
        return qrBuffer;
    } catch (error) {
        console.error('‚ùå Error reading existing QR code:', error);
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ QR-–∫–æ–¥');
    }
}

module.exports = {
    generateDetailedLandDebtDocument
};