const { Paragraph, TextRun, patchDocument, TableRow, TableCell, Table, VerticalAlign, HeadingLevel, PatchType, AlignmentType, WidthType, ExternalHyperlink, ImageRun } = require('docx')
const { addRequisiteToLandDebt,addRequisiteToWaterDebt } = require('./function');
const { territory_title, territory_title_instrumental, phone_number_GU_DPS, GU_DPS_region, website_name, website_url, telegram_name, telegram_url } = require('./constants');
const fs = require('fs').promises

const oneCellWidth = {
    size: 750,
    type: WidthType.PERCENTAGE
}

const addRow = (body) => {
    return body.map((el) => {
        return new TableRow({
            children: [
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({ text: el?.label, font: "Times New Roman", size: 26, bold: true })
                            ],
                            alignment: AlignmentType.CENTER,
                        })
                    ],
                    width: oneCellWidth,
                    verticalAlign: 'center',
                }),
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({ text: el?.value, font: "Times New Roman", size: 26, })
                            ],
                            alignment: AlignmentType.CENTER,
                        })
                    ],
                    width: oneCellWidth,
                    verticalAlign: 'center',
                }),
            ],
        })
    })

};





const createRequisiteWord = async (body, requisite) => {
    try {
        console.log("body", body);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .flat() –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º–æ–∂–ª–∏–≤–∏—Ö –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –º–∞—Å–∏–≤—ñ–≤
        const debts = addRequisiteToLandDebt(body, requisite).flat();

        console.log("üìå debts –ø—ñ—Å–ª—è .flat():", debts);

        if (!Array.isArray(debts) || debts.length === 0) {
            throw new Error("‚ùå –ü–û–ú–ò–õ–ö–ê: debts –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ —î –º–∞—Å–∏–≤–æ–º!");
        }

        const docBuffer = await fs.readFile("./files/doc1.docx");

        let totalAmount = 0; // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤

        const children = debts.map((debt, index) => {
            totalAmount += parseFloat(debt.amount || 0); // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏

            return [
		new Paragraph({ children: [new TextRun({ text: " " })] }),
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({ 
                            text: `          ${index + 1}. ${debt.debtText}`, // –î–æ–¥–∞—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é
                            font: "Times New Roman",
                            size: 26
                        }),
                    ],
                }),
                new Paragraph({
                    alignment: AlignmentType.CENTER,
                    children: [
                        new TextRun({ text: `{{requisiteText${index}}}`, font: "Times New Roman", size: 26 }),
                    ],
                }),
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({ text: `{{table${index}}}`, font: "Times New Roman", size: 26 }),
                    ],
                }),
                /*new Paragraph({
                    alignment: AlignmentType.RIGHT,
                    children: [
                        new TextRun({
                            text: `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ—Ä–≥—É –ø–æ —Ü—ñ–π —Ç–∞–±–ª–∏—Ü—ñ: ${debt.amount} –≥—Ä–Ω`,
                            font: "Times New Roman",
                            size: 26,
                            bold: true
                        }),
                    ],
                }),*/
                //new Paragraph({ children: [new TextRun({ text: " " })] }),
            ];
        }).flat();

        const patches = {
            next: { type: PatchType.DOCUMENT, children },
            name: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: body.name, font: "Times New Roman", size: 26, bold: true })
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
            ident: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `—ñ.–∫. –•–•–•–•–•–•–•${body.identification}`, font: "Times New Roman", size: 24, bold: true, italics: true })
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
            debt_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          ${territory_title} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–∞–Ω–∏—Ö –ì–£ –î–ü–° —É ${GU_DPS_region}, —Å—Ç–∞–Ω–æ–º ${new Intl.DateTimeFormat('uk-UA', {
                                    day: '2-digit',
                                    month: 'long',
                                    year: 'numeric',
                                }).format(new Date(body.date))} —É –í–∞—Å –Ω–∞—è–≤–Ω–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É ${territory_title_instrumental},  –∞ —Å–∞–º–µ:`,
                                font: "Times New Roman",
                                size: 26
                            })
                        ],
                    })
                ],
            },
            gu_dps: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –í —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –ø–æ –¥–∞–Ω—ñ–π –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ì–£ –î–ü–° —É ${GU_DPS_region} –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone_number_GU_DPS}.`,
                                font: "Times New Roman",
                                size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            sanction_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –ü—Ä–æ—Å–∏–º–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ–≥–∞—Å–∏—Ç–∏ —É—Ç–≤–æ—Ä–µ–Ω—É –í–∞–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É ${territory_title_instrumental}. –ù–µ—Å–≤–æ—î—á–∞—Å–Ω–∞ —Å–ø–ª–∞—Ç–∞ —Å—É–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø–µ–Ω—ñ.`,
                                font: "Times New Roman",
                                size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            footer_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `          –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –º–æ–∂–Ω–∞ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞—Ö ¬´${website_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: website_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: website_url,
                            }),
                            new TextRun({ text: ` –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´${telegram_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: telegram_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: telegram_url,
                            }),
                            new TextRun({ text: `. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.`, font: "Times New Roman", size: 24 }),
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            image: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: await fs.readFile("./files/qr-code.png"),
                                transformation: {
                                    width: 128,
                                    height: 128,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
        };

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ debt
        debts.forEach((debt, index) => {
            patches[`debtText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debt.debtText || "‚ùå –ü–û–ú–ò–õ–ö–ê: –¢–µ–∫—Å—Ç –±–æ—Ä–≥—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
                        font: "Times New Roman",
                        size: 26
                    })
                ],
            };

            patches[`requisiteText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debt.requisiteText || "‚ùå –ü–û–ú–ò–õ–ö–ê: –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                        font: "Times New Roman",
                        bold: true,
                        size: 26
                    })
                ],
            };

             patches[`table${index}`] = {
                type: PatchType.DOCUMENT,
                children: [
                    new Table({
                        rows: [
                            ...addRow(debt.table || []),
                            new TableRow({
                                children: [
                                    new TableCell({
                                        width: { size: 50, type: WidthType.PERCENTAGE },
                                        children: [
                                            new Paragraph({
                                                alignment: AlignmentType.CENTER,
                                                children: [
                                                    new TextRun({ 
                                                        text: "–°—É–º–∞", 
                                                        font: "Times New Roman", 
                                                        bold: true, 
                                                        size: 24 
                                                    })
                                                ]
                                            })
                                        ],
                                    }),
                                    new TableCell({
                                        width: { size: 50, type: WidthType.PERCENTAGE },
                                        children: [
                                            new Paragraph({
                                                alignment: AlignmentType.CENTER,
                                                children: [
                                                    new TextRun({ 
                                                        text: `${debt.amount} –≥—Ä–Ω`, 
                                                        font: "Times New Roman",  
                                                        size: 24
                                                    })
                                                ]
                                            })
                                        ],
                                    }),
                                ],
                            }),
                        ]
                    })
                ],
            };
        });

        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø—ñ—Å–ª—è —Ü–∏–∫–ª—É
        patches[`totalAmount`] = {
            type: PatchType.DOCUMENT,
            children: [
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({
                            text: `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ—Ä–≥—É –ø–æ –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö: ${totalAmount.toFixed(2)} –≥—Ä–Ω`,
                            font: "Times New Roman",
                            size: 22, // –ú–µ–Ω—à–∏–π —à—Ä–∏—Ñ—Ç
                            bold: true
                        }),
                    ],
                }),
            ],
        };

        const patchedDoc = await patchDocument(docBuffer, { patches });
        return patchedDoc;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
        return false;
    }
};




const createUtilitiesRequisiteWord = async (body, requisite) => {
    try {
        if (!Array.isArray(body)) {
            throw new Error("body –º–∞—î –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º");
        }

        const debts = body.map(item => {
            const result = addRequisiteToWaterDebt(item, requisite);
            if (!result) {
                console.warn("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: addRequisiteToWaterDebt –ø–æ–≤–µ—Ä–Ω—É–ª–∞ undefined –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è", item);
            }
            return result;
        }).flat().filter(Boolean); // –í–∏–¥–∞–ª—è—î–º–æ undefined

        console.log("debts",debts);

        const docBuffer = await fs.readFile("./files/docWater.docx");

        const children = debts.map((_, index) => [
            new Paragraph({
                alignment: AlignmentType.LEFT,
                children: [
                    new TextRun({ text: `{{debtText${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
            new Paragraph({
                alignment: AlignmentType.CENTER,
                children: [
                    new TextRun({ text: `{{requisiteText${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
            new Paragraph({
                alignment: AlignmentType.LEFT,
                children: [
                    new TextRun({ text: `{{table${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
        ]).flat();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞
        let formattedDate;
        try {
            formattedDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
            }).format(new Date(body[0].date));
        } catch (error) {
            console.warn("‚ùó –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞.");
            formattedDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
            }).format(new Date());
        }

        const patches = {
            next: {
                type: PatchType.DOCUMENT,
                children,
            },
            name: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: body[0].fio, font: "Times New Roman", size: 26, bold: true })
                        ],
                        alignment: AlignmentType.CENTER
                    })
                ],
            },
            ident: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `—ñ.–∫. ${body[0].payerident}`, font: "Times New Roman", size: 24, bold: true, italics: true })
                        ],
                        alignment: AlignmentType.CENTER
                    })
                ],
            },
            debt_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          ${territory_title} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞—è–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö, —Å—Ç–∞–Ω–æ–º –Ω–∞ ${formattedDate} —É –í–∞—Å —ñ—Å–Ω—É—î –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ –ø–µ—Ä–µ–¥ ${territory_title_instrumental}.`,
                                font: "Times New Roman", size: 26
                            })
                        ],
                    })
                ],
            },
            support_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ü—ñ—î—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: ${phone_number_GU_DPS}.`,
                                font: "Times New Roman", size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            sanction_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –ü—Ä–æ—Å–∏–º–æ –≤–∞—Å —Å–≤–æ—î—á–∞—Å–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤–∏—Ö —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥.`,
                                font: "Times New Roman", size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            footer_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `          –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å —Ç–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ ¬´${website_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: website_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: website_url,
                            }),
                            new TextRun({ text: ` –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´${telegram_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: telegram_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: telegram_url,
                            }),
                            new TextRun({ text: `. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.`, font: "Times New Roman", size: 24 }),
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            image: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: await fs.readFile("./files/qr-code.png"),
                                transformation: {
                                    width: 128,
                                    height: 128,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
        };

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ debt
        debts.forEach((debt, index) => {
            patches[`debtText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: `${debt.debtText}`,
                        font: "Times New Roman",
                        size: 26
                    })
                ],
            };

            patches[`requisiteText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: `${debt.requisiteText}`,
                        font: "Times New Roman",
                        bold: true,
                        size: 26
                    })
                ],
            };

            patches[`table${index}`] = {
                type: PatchType.DOCUMENT,
                children: [
                    new Table({
                        rows: addRow(debt.table)
                    })
                ],
            };
        });

        const patchedDoc = await patchDocument(docBuffer, { patches });
        return patchedDoc;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
        return false;
    }
};

// –î–æ–¥–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ —Ñ–∞–π–ª—É generateDocx.js

const createTaxNotificationWord = async (charge, settings, debtorInfo = null) => {
    try {
        console.log('üìÑ Creating tax notification for:', charge.payer_name);
        
        // –ß–∏—Ç–∞—î–º–æ —à–∞–±–ª–æ–Ω –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const docBuffer = await fs.readFile("./files/docMessage.docx");
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        let formattedDocumentDate;
        try {
            formattedDocumentDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
            }).format(new Date(charge.document_date || new Date()));
        } catch (error) {
            console.warn("‚ùó –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞.");
            formattedDocumentDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
            }).format(new Date());
        }
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—É–º—É –ø—Ä–æ–ø–∏—Å–æ–º
        const amountInWords = convertNumberToWords(charge.amount);
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—É–º—É –∑ –∫–æ–ø—ñ–π–∫–∞–º–∏
        const amountFormatted = Number(charge.amount).toFixed(2);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–∫ –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
        const taxYear = new Date(charge.document_date || new Date()).getFullYear();
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç–µ–π
        const formatDebtAmount = (amount) => {
            const numAmount = Number(amount) || 0;
            return numAmount.toFixed(2) + ' –≥—Ä–Ω.';
        };
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç–µ–π –∑ debtorInfo –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 0.00
        const debtAmounts = {
            non_residential: formatDebtAmount(debtorInfo?.non_residential_debt || 0),
            residential: formatDebtAmount(debtorInfo?.residential_debt || 0),
            land: formatDebtAmount(debtorInfo?.land_debt || 0),
            rent: formatDebtAmount(debtorInfo?.orenda_debt || 0),
            mpz: formatDebtAmount(debtorInfo?.mpz || 0)
        };
        
        console.log('üí∞ Debt amounts from ower.ower:', debtAmounts);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è –∑–∞–º—ñ–Ω–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
        const patches = {
            // –û–°–ù–û–í–ù–ê –ß–ê–°–¢–ò–ù–ê –î–û–ö–£–ú–ï–ù–¢–£
            
            // –Ü–º'—è –ø–ª–∞—Ç–Ω–∏–∫–∞ (–ö–£–•–ê–†–°–¨–ö–ê –ì–ê–õ–ò–ù–ê –î–ú–ò–¢–†–Ü–í–ù–ê)
            payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 22,
                        bold: true
                    })
                ],
            },
            
            // –Ü–ü–ù –ø–ª–∞—Ç–Ω–∏–∫–∞ (2066017602)  
            tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 22,
                        bold: true
                    })
                ],
            },
            
            // –¢–ê–ë–õ–ò–¶–Ø –ü–û–î–ê–¢–ö–û–í–û–ì–û –ó–û–ë–û–í'–Ø–ó–ê–ù–ù–Ø
            
            // –ü–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ (2025)
            tax_year: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: taxYear.toString(),
                        font: "Times New Roman",
                        size: 22
                    })
                ],
            },
            
            // –ù–æ–º–µ—Ä –¥—ñ–ª—è–Ω–∫–∏ (5481-2407-1918-UA61040110000010646)
            plot_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.full_document_id || charge.account_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 22
                    })
                ],
            },
            
            // –°—É–º–∞ –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–æ–±–æ–≤'—è–∑–∞–Ω–Ω—è (8,27)
            tax_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: amountFormatted,
                        font: "Times New Roman",
                        size: 22
                    })
                ],
            },
            
            // –°—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º (–≤—ñ—Å—ñ–º –≥—Ä–Ω. 27 –∫–æ–ø.)
            amount_in_words: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: amountInWords,
                        font: "Times New Roman",
                        size: 22
                    })
                ],
            },
            
            // –¢–ê–ë–õ–ò–¶–Ø –†–ï–ö–í–Ü–ó–ò–¢–Ü–í –î–õ–Ø –û–ü–õ–ê–¢–ò
            
            // –°—É–º–∞ –ø–ª–∞—Ç–µ–∂—É –≤ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ (8,27)
            payment_amount_table: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: amountFormatted,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É (2066017602)
            tax_number_payment: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É (–ö–£–•–ê–†–°–¨–ö–ê –ì–ê–õ–ò–ù–ê –î–ú–ò–¢–†–Ü–í–ù–ê)
            payer_name_payment: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –î–û–í–Ü–î–ö–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø - –¥–∞—Ç–∞ —Å—Ç–∞–Ω–æ–º –Ω–∞ (01.06.2025—Ä.)
            reference_date: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formattedDocumentDate + "—Ä.",
                        font: "Times New Roman",
                        size: 20,
                        bold: true
                    })
                ],
            },
            
            // –ó–ê–ë–û–†–ì–û–í–ê–ù–û–°–¢–Ü –ó –†–ï–ê–õ–¨–ù–ò–ú–ò –°–£–ú–ê–ú–ò
            
            // 1. –ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞): –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            non_residential_debt_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.non_residential,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞) - –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            non_residential_debt_amount_requisites: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.non_residential,
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            non_residential_tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            non_residential_payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // 2. –ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–∂–∏—Ç–ª–æ–≤–∞): –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            residential_debt_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.residential,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–∂–∏—Ç–ª–æ–≤–∞) - –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            residential_debt_amount_requisites: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.residential,
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –∂–∏—Ç–ª–æ–≤–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            residential_tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –∂–∏—Ç–ª–æ–≤–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            residential_payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // 3. –ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –∑–µ–º–ª—é: –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            land_debt_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.land,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É - –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            land_debt_amount_requisites: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.land,
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
            land_tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
            land_payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // 4. –û—Ä–µ–Ω–¥–∞ –∑–µ–º–ª—ñ: –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            rent_debt_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.rent,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ—Ä–µ–Ω–¥–∏ –∑–µ–º–ª—ñ - –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            rent_debt_amount_requisites: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.rent,
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –æ—Ä–µ–Ω–¥–∏
            rent_tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –æ—Ä–µ–Ω–¥–∏
            rent_payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // 5. –ú–ü–ó: –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            mpz_debt_amount: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.mpz,
                        font: "Times New Roman",
                        size: 20
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –ú–ü–ó - –†–ï–ê–õ–¨–ù–ê –°–£–ú–ê
            mpz_debt_amount_requisites: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debtAmounts.mpz,
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–ü–ù –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –ú–ü–ó
            mpz_tax_number: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –Ü–º'—è –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö –ú–ü–ó
            mpz_payer_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (–∑–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫)
            payment_purpose_main: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'land'),
                        font: "Times New Roman",
                        size: 18
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞)
            payment_purpose_non_residential: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'non_residential'),
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–∂–∏—Ç–ª–æ–≤–∞)
            payment_purpose_residential: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'residential'),
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
            payment_purpose_land: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'land'),
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏ –∑–µ–º–ª—ñ
            payment_purpose_rent: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'rent'),
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –ú–ü–ó
            payment_purpose_mpz: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: formatPaymentPurpose(charge, settings, 'mpz'),
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –†–ï–ö–í–Ü–ó–ò–¢–ò –ó SETTINGS
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞)
            non_residential_recipient_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'non_residential')?.recipientname || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            non_residential_account: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'non_residential')?.account || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            non_residential_edrpou: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'non_residential')?.edrpou || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–∂–∏—Ç–ª–æ–≤–∞)
            residential_recipient_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'residential')?.recipientname || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            residential_account: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'residential')?.account || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            residential_edrpou: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'residential')?.edrpou || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ç–∫—É
            land_recipient_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'land')?.recipientname || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            land_account: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'land')?.account || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            land_edrpou: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'land')?.edrpou || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ—Ä–µ–Ω–¥–∏ –∑–µ–º–ª—ñ
            rent_recipient_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'rent')?.recipientname || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            rent_account: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'rent')?.account || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            rent_edrpou: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'rent')?.edrpou || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            // –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –ú–ü–ó
            mpz_recipient_name: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'mpz')?.recipientname || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            mpz_account: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'mpz')?.account || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
            
            mpz_edrpou: {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: getRequisitesForTaxType(settings, 'mpz')?.edrpou || "–ù–ï –í–ö–ê–ó–ê–ù–û",
                        font: "Times New Roman",
                        size: 16
                    })
                ],
            },
        };
        
        console.log('üîÑ Applying patches to tax notification document...');
        const patchedDoc = await patchDocument(docBuffer, { patches });
        
        console.log('‚úÖ Tax notification document created successfully');
        return patchedDoc;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
        throw error;
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
const formatPaymentPurpose = (charge, settings, taxType) => {
    const taxNumber = charge.tax_number || "–ù–ï –í–ö–ê–ó–ê–ù–û";
    const payerName = charge.payer_name?.toUpperCase() || "–ù–ï –í–ö–ê–ó–ê–ù–û";
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥–∏ –∑ settings –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –ø–æ–¥–∞—Ç–∫—É
    const taxCodes = {
        'non_residential': '18010300', // –ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞)
        'residential': '18010200',     // –ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–∂–∏—Ç–ª–æ–≤–∞)  
        'land': '18010700',           // –ó–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫
        'rent': '18010900',           // –û—Ä–µ–Ω–¥–∞ –∑–µ–º–ª—ñ
        'mpz': '11011300'             // –ú–ü–ó
    };
    
    // –ù–∞–∑–≤–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤
    const taxNames = {
        'non_residential': '–ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–Ω–µ –∂–∏—Ç–ª–æ–≤–∞)',
        'residential': '–ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å (–∂–∏—Ç–ª–æ–≤–∞)',
        'land': '–∑–µ–º–µ–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫ –∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –æ—Å—ñ–±',
        'rent': '–û—Ä–µ–Ω–¥–∞ –∑–µ–º–ª—ñ –∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –æ—Å—ñ–±',
        'mpz': '–ú–ü–ó'
    };
    
    const taxCode = taxCodes[taxType] || taxCodes['land'];
    const taxName = taxNames[taxType] || taxNames['land'];
    
    // –§–æ—Ä–º—É—î–º–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: *;101; –ö–û–î; –Ü–ü–ù; –Ü–ú'–Ø; –ù–ê–ó–í–ê_–ü–û–î–ê–¢–ö–£;
    return `*;101; ${taxCode}; ${taxNumber}; ${payerName}; ${taxName};`;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –∑ settings
const getRequisitesForTaxType = (settings, taxType) => {
    if (!settings) return null;
    
    const requisiteFields = {
        'non_residential': {
            purpose: settings.non_residential_debt_purpose,
            account: settings.non_residential_debt_account,
            edrpou: settings.non_residential_debt_edrpou,
            recipientname: settings.non_residential_debt_recipientname
        },
        'residential': {
            purpose: settings.residential_debt_purpose,
            account: settings.residential_debt_account,
            edrpou: settings.residential_debt_edrpou,
            recipientname: settings.residential_debt_recipientname
        },
        'land': {
            purpose: settings.land_debt_purpose,
            account: settings.land_debt_account,
            edrpou: settings.land_debt_edrpou,
            recipientname: settings.land_debt_recipientname
        },
        'rent': {
            purpose: settings.orenda_debt_purpose,
            account: settings.orenda_debt_account,
            edrpou: settings.orenda_debt_edrpou,
            recipientname: settings.orenda_debt_recipientname
        },
        'mpz': {
            purpose: settings.mpz_purpose,
            account: settings.mpz_account,
            edrpou: settings.mpz_edrpou,
            recipientname: settings.mpz_recipientname
        }
    };
    
    return requisiteFields[taxType] || requisiteFields['land'];
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞ (–ø–æ–≤–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è)
const convertNumberToWords = (amount) => {
    const numAmount = Number(amount);
    if (isNaN(numAmount)) return '–Ω—É–ª—å –≥—Ä–Ω. 00 –∫–æ–ø.';
    
    const grn = Math.floor(numAmount);
    const kop = Math.round((numAmount - grn) * 100);
    
    // –ú–∞—Å–∏–≤–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —á–∏—Å–ª—ñ–≤–Ω–∏–∫—ñ–≤ (—á–æ–ª–æ–≤—ñ—á–∏–π —Ä—ñ–¥)
    const onesMale = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø\'—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤\'—è—Ç—å'];
    // –ú–∞—Å–∏–≤–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —á–∏—Å–ª—ñ–≤–Ω–∏–∫—ñ–≤ (–∂—ñ–Ω–æ—á–∏–π —Ä—ñ–¥ –¥–ª—è –≥—Ä–∏–≤–µ–Ω—å)
    const onesFemale = ['', '–æ–¥–Ω–∞', '–¥–≤—ñ', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø\'—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤\'—è—Ç—å'];
    
    const teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–∞–¥—Ü—è—Ç—å', '–¥–≤–∞–Ω–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç—å', '—á–æ—Ç–∏—Ä–Ω–∞–¥—Ü—è—Ç—å', '–ø\'—è—Ç–Ω–∞–¥—Ü—è—Ç—å', '—à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç—å', '—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', '–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', '–¥–µ–≤\'—è—Ç–Ω–∞–¥—Ü—è—Ç—å'];
    const tens = ['', '', '–¥–≤–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–¥—Ü—è—Ç—å', '—Å–æ—Ä–æ–∫', '–ø\'—è—Ç–¥–µ—Å—è—Ç', '—à—ñ—Å—Ç–¥–µ—Å—è—Ç', '—Å—ñ–º–¥–µ—Å—è—Ç', '–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç', '–¥–µ–≤\'—è–Ω–æ—Å—Ç–æ'];
    const hundreds = ['', '—Å—Ç–æ', '–¥–≤—ñ—Å—Ç—ñ', '—Ç—Ä–∏—Å—Ç–∞', '—á–æ—Ç–∏—Ä–∏—Å—Ç–∞', '–ø\'—è—Ç—Å–æ—Ç', '—à—ñ—Å—Ç—Å–æ—Ç', '—Å—ñ–º—Å–æ—Ç', '–≤—ñ—Å—ñ–º—Å–æ—Ç', '–¥–µ–≤\'—è—Ç—Å–æ—Ç'];
    
    // –¢–∏—Å—è—á—ñ (–∂—ñ–Ω–æ—á–∏–π —Ä—ñ–¥)
    const thousands = ['', '–æ–¥–Ω–∞ —Ç–∏—Å—è—á–∞', '–¥–≤—ñ —Ç–∏—Å—è—á—ñ', '—Ç—Ä–∏ —Ç–∏—Å—è—á—ñ', '—á–æ—Ç–∏—Ä–∏ —Ç–∏—Å—è—á—ñ'];
    const thousandsPlural = '—Ç–∏—Å—è—á';
    
    // –î–µ—Å—è—Ç–∫–∏ —Ç–∏—Å—è—á
    const tenThousands = ['', '–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–¥—Ü—è—Ç—å', '—Å–æ—Ä–æ–∫', '–ø\'—è—Ç–¥–µ—Å—è—Ç', '—à—ñ—Å—Ç–¥–µ—Å—è—Ç', '—Å—ñ–º–¥–µ—Å—è—Ç', '–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç', '–¥–µ–≤\'—è–Ω–æ—Å—Ç–æ'];
    
    const convertNumber = (num, isFeminine = false) => {
        if (num === 0) return '–Ω—É–ª—å';
        
        let result = '';
        
        // –î–µ—Å—è—Ç–∫–∏ —Ç–∏—Å—è—á (10000-99999)
        if (num >= 10000) {
            const tenThousandsDigit = Math.floor(num / 10000);
            const thousandsDigit = Math.floor((num % 10000) / 1000);
            
            if (tenThousandsDigit >= 1) {
                if (tenThousandsDigit === 1 && thousandsDigit >= 1) {
                    // 11000-19999
                    const teensThousands = Math.floor(num / 1000);
                    if (teensThousands >= 10 && teensThousands <= 19) {
                        result += teens[teensThousands - 10] + ' —Ç–∏—Å—è—á ';
                        num %= 1000;
                    } else {
                        result += tenThousands[tenThousandsDigit] + ' ';
                        num %= 10000;
                    }
                } else {
                    result += tenThousands[tenThousandsDigit] + ' ';
                    num %= 10000;
                }
            }
        }
        
        // –¢–∏—Å—è—á—ñ (1000-9999)
        if (num >= 1000) {
            const thousandsDigit = Math.floor(num / 1000);
            
            if (thousandsDigit === 1) {
                result += '–æ–¥–Ω–∞ —Ç–∏—Å—è—á–∞ ';
            } else if (thousandsDigit === 2) {
                result += '–¥–≤—ñ —Ç–∏—Å—è—á—ñ ';
            } else if (thousandsDigit === 3) {
                result += '—Ç—Ä–∏ —Ç–∏—Å—è—á—ñ ';
            } else if (thousandsDigit === 4) {
                result += '—á–æ—Ç–∏—Ä–∏ —Ç–∏—Å—è—á—ñ ';
            } else if (thousandsDigit >= 5 && thousandsDigit <= 9) {
                result += onesMale[thousandsDigit] + ' —Ç–∏—Å—è—á ';
            } else {
                // –î–ª—è —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
                result += convertHundreds(thousandsDigit, false) + ' —Ç–∏—Å—è—á ';
            }
            
            num %= 1000;
        }
        
        // –°–æ—Ç–Ω—ñ, –¥–µ—Å—è—Ç–∫–∏, –æ–¥–∏–Ω–∏—Ü—ñ
        result += convertHundreds(num, isFeminine);
        
        return result.trim();
    };
    
    const convertHundreds = (num, isFeminine = false) => {
        let result = '';
        const ones = isFeminine ? onesFemale : onesMale;
        
        // –°–æ—Ç–Ω—ñ
        if (num >= 100) {
            result += hundreds[Math.floor(num / 100)] + ' ';
            num %= 100;
        }
        
        // –î–µ—Å—è—Ç–∫–∏ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ
        if (num >= 20) {
            result += tens[Math.floor(num / 10)] + ' ';
            num %= 10;
        } else if (num >= 10) {
            result += teens[num - 10] + ' ';
            num = 0;
        }
        
        // –û–¥–∏–Ω–∏—Ü—ñ
        if (num > 0) {
            result += ones[num] + ' ';
        }
        
        return result.trim();
    };
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∂—ñ–Ω–æ—á–∏–π —Ä—ñ–¥ –¥–ª—è –≥—Ä–∏–≤–µ–Ω—å
    let grnText = convertNumber(grn, true);
    
    // –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ '–Ω—É–ª—å'
    if (!grnText || grnText === '') {
        grnText = '–Ω—É–ª—å';
    }
    
    const kopText = kop.toString().padStart(2, '0');
    
    return `${grnText} –≥—Ä–Ω. ${kopText} –∫–æ–ø.`;
};


// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é —Ä–∞–∑–æ–º –∑ —ñ—Å–Ω—É—é—á–∏–º–∏
module.exports = {
    createRequisiteWord,
    createUtilitiesRequisiteWord,
    createTaxNotificationWord  // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø
}







